---
categories:
    Unknown:
        shortName: 'unknown'
        color: '#808080'
    Performance:
        shortName: 'perf'
        color: '#40c040'
    Security:
        shortName: 'sec'
        color: '#c04040'
    Feature:
        shortName: 'feat'
        color: '#4040c0'
    Community:
        shortName: 'comm'
        color: 'yellow'
    TechDebt:
        shortName: 'debt'
        color: 'orange'
    Architecture:
        shortName: 'arch'
        color: '#40c0c0'
workSizes:
    Unknown:
        renderSize: 1
    Days:
        renderSize: 1
    Weeks:
        renderSize: 2
    Months:
        renderSize: 3
    Quarters:
        renderSize: 4
tasks:

    # * Decoupling Bytecode
    # * Bytecode iterator
    # * BaselineInspector replacement
    # * Source note refactor and removal
    # Ion CFG should use BytecodeIterator
    # Bailouts should use BytecodeIterator
    # Debugger stepping should use BytecodeIterator
    # Error stacks should use BytecodeIterator
    # XDR should use BytecodeIterator
    # Ion inlining logic should use BytecodeIterator
    # Convert TypeInference ObjectGroup sites and heuristics to use
    #   BytecodeIterator
    # Convert StackDepth computations to use BytecodeIterator
    # * Replace all uses of jsbytecode* with opaque type
    # * Replace pc offset with opaque wrapper

    ##
    ## Bytecode Decoupling
    ##

    decouple_bytecode:
        workSize: 'months'
        category: 'debt'
        description: |
            There are too many components that look directly
            at bytecode, including TI (for heuristics, static
            analysis of constructor functions, etc.), all
            the compilers, etc.

    bytecode_iterator:
        workSize: 'weeks'
        category: 'debt'
        done: true
        description: |
            Write a bytecode iterator constructor that allows
            for an abstract traversal of the bytecode as
            an abstract CFG with individual instructions.

    kill_jsbytecode_star:
        workSize: 'weeks'
        category: 'debt'
        blocks: ['decouple_bytecode']
        needs: ['bytecode_iterator']
        description: |
            Replace all uses of jsbytecode* outside of the
            interpreter with an opaque wrapper.

    kill_pcoffset:
        workSize: 'weeks'
        category: 'debt'
        blocks: ['decouple_bytecode']
        needs: ['bytecode_iterator']
        description: |
            Replace all uses of pcOffset outside of the
            interpreter with an opaque wrapper.

    rewrite_baseline_inspector:
        workSize: 'weeks'
        category: 'debt'
        blocks: ['decouple_bytecode']
        needs: ['bytecode_iterator']
        description: |
            Rewrite the BaselineInspector to use the
            new BytecodeIterator (???).

    refactor_source_notes:
        workSize: 'weeks'
        category: 'debt'
        blocks: ['decouple_bytecode']
        description: |
            Remove all semantic information from SourceNotes.
            Source notes should be purely for annotations
            mapping bytcode to source text, or should not
            exist.  Information like loop-depth, etc. should
            be kept in a separate structure.

    ##
    ## Language Features
    ##


    class_features:
        workSize: 'quarters'
        category: 'feat'
        description: |
            Class-related feature implementation.

    static_fields:
        workSize: 'weeks'
        category: 'feat'
        blocks: ['class_features']
        description: |
            Implement static fields.

    private_fields:
        workSize: 'weeks'
        category: 'feat'
        blocks: ['class_features']
        done: true
        description: |
            Implement private fields.

    module_features:
        workSize: 'quarters'
        category: 'feat'
        description: |
            Module-related feature implementation.

    dynamic_import:
        workSize: 'months'
        category: 'feat'
        blocks: ['module_features']
        description: |
            Implement "dynamic import()".

    import_dot_meta:
        workSize: 'weeks'
        category: 'feat'
        blocks: ['module_features']
        description: |
            Implement "import.meta".

    ##
    ## Security
    ##

    spectre_jit_mitigations:
        workSize: 'months'
        category: 'sec'
        done: true
        description: |
            SPECTRE security work - jit mitigations.

    ##
    ## Shypes
    ##

    hidden_type_api:
        workSize: 'weeks'
        category: 'debt'
        description: |
            Segregate the compiler's usage of the hidden type
            system (shapes and object groups) with an API
            that clearly expresses the queries being
            performed, constraints being attached, and
            inferences being guaranteed.

    jit_json_to_plain_obj:
        workSize: 'days'
        category: 'arch'
        description: |
            Convert the JSON.parse JIT to use
            plain objects instead of unboxed
            objects.

    rm_unboxed_objects:
        workSize: 'days'
        category: 'arch'
        needs: ['jit_json_to_plain_obj']
        description: |
            Remove unboxed object support.

    measure_telescoping_proto_chains:
        workSize: 'days'
        category: 'arch'
        description: |
            Measure the benefits of telescoping proto
            chains and how much of a performance impact
            would be had by disabling them and always
            emitting proto-chain walks.

    rm_telescoping_proto_chain:
        workSize: 'days'
        category: 'arch'
        needs: ['measure_telescoping_proto_chains']
        description: |
            Remove support for telescoping proto chains.

    measure_shape_group_rooting:
        workSize: 'days'
        category: 'arch'
        description: |
            Measure and calculate numbers for the amount
            of type-divergence that would be introduced by
            having every group root the shape tree of
            its instances.

    root_shape_in_groups:
        workSize: 'weeks'
        category: 'arch'
        needs: ['rm_unboxed_objects', 'rm_telescoping_proto_chain',
                'measure_shape_group_rooting']
        description: |
            Root shape trees within groups, adding a group-pointer
            to each shape.  Remove group pointer from JSObjects,
            as shape now implies the group.
...
